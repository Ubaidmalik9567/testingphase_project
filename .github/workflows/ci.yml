# name: Deploy to Amazon ECS

# on:
#   push:
    
# # env:
# #   AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
# #   ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
# #   ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
# #   ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
# #   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
# #                                                # file, e.g. .aws/task-definition.json
# #   CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
# #                                                # containerDefinitions section of your task definition

# # that use for linux          sudo apt-get update , sudo apt-get Install -y jq unzip
# permissions:
#   id-token: write
#   contents: read

# jobs:
#   Integration:
#     name: Continuous Integration
#     runs-on: windows-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Lint code
#         run: echo "linting repository"

#       - name: Run unit tests
#         run: echo "Unit tests running"

#   build-and-push-ecr-image:
#     name: Continuous Delivery/ Push to ecr
#     needs: Integration
#     runs-on: windows-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install Utilities
#         run: |
#           choco install jq
#           choco install unzip
            
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: latest
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          

#   Continuous-Deployment:
#     name: Pull to ecr and run it into ec2
#     needs: build-and-push-ecr-image
#     runs-on: windows-latest
#     steps:
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: pull latest image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}``
#           IMAGE_TAG: latest
#         run: |
#           docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
#       - name: delete previous image
#         run: |
#           docker rm -f hamspam || true
        
#       - name: run docker image to user server
#         run: |
#           docker run -d -p 8080:8080 --name=hamspam -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e "AWS_REGION=${{ secrets.AWS_REGION }}" ${{ secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

name: Deploy to Amazon ECS

on:
  push:
    
permissions:
  id-token: write
  contents: read

jobs:
  Integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "linting repository"

      - name: Run unit tests
        run: echo "Unit tests running"

  build-and-push-ecr-image:
    name: Continuous Delivery/ Push to ECR
    needs: Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" .
          docker push "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  Continuous-Deployment:
    name: Pull to ecr and run it into ec2
    needs: build-and-push-ecr-image
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: pull latest image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker pull "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
        
      - name: delete previous image
        run: |
          docker rm -f hamspam || true
        
      - name: run docker image to user server
        run: |
          docker run -d -p 8080:8080 --name=hamspam -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e "AWS_REGION=${{ secrets.AWS_REGION }}" "${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
  